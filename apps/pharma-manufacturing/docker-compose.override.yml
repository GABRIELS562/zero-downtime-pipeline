# Docker Compose Override for Different Validation Environments
# Use with: docker-compose -f docker-compose.yml -f docker-compose.override.yml up

version: '3.8'

services:
  # =================================================================
  # Development Environment Overrides
  # =================================================================
  app:
    environment:
      # Override for development-specific settings
      - ENVIRONMENT=development
      - VALIDATION_STAGE=development
      - GMP_VALIDATION_LEVEL=basic
    volumes:
      # Additional development volumes
      - ./config/.env.development:/app/.env
      - ./validation-docs:/app/validation-docs
    profiles:
      - development

  # =================================================================
  # Testing Environment Configuration
  # =================================================================
  app-testing:
    build:
      context: .
      dockerfile: Dockerfile
      target: testing
    environment:
      # Testing-specific environment variables
      - ENVIRONMENT=testing
      - VALIDATION_STAGE=testing
      - GMP_VALIDATION_LEVEL=enhanced
      - DATABASE_URL=postgresql://pharma_test_user:pharma_test_password@postgres-test:5432/pharma_manufacturing_test
    depends_on:
      postgres-test:
        condition: service_healthy
    volumes:
      - ./config/.env.testing:/app/.env
      - ./tests:/app/tests
      - ./validation-protocols:/app/validation-protocols
      - test_reports:/app/reports
    networks:
      - pharma-network
    profiles:
      - testing

  postgres-test:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: pharma_test_user
      POSTGRES_PASSWORD: pharma_test_password
      POSTGRES_DB: pharma_manufacturing_test
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
      - ./scripts/db-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pharma_test_user -d pharma_manufacturing_test"]
      interval: 15s
      timeout: 5s
      retries: 5
    networks:
      - pharma-network
    profiles:
      - testing

  # =================================================================
  # Production Environment Configuration
  # =================================================================
  app-production:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        BUILD_ID: ${BUILD_ID:-prod-build}
        GIT_COMMIT: ${GIT_COMMIT:-prod-commit}
        BUILD_TIMESTAMP: ${BUILD_TIMESTAMP}
    environment:
      # Production-specific environment variables
      - ENVIRONMENT=production
      - VALIDATION_STAGE=production
      - GMP_VALIDATION_LEVEL=full
      - WORKERS=4
      - TIMEOUT=60
    volumes:
      - ./config/.env.production:/app/.env
      - production_data:/app/data
      - production_logs:/app/logs
      - production_backups:/app/backups
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health/live"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    networks:
      - pharma-network
    profiles:
      - production

  # =================================================================
  # Validation Environment for GMP Testing
  # =================================================================
  app-validation:
    build:
      context: .
      dockerfile: Dockerfile
      target: validation
    environment:
      - ENVIRONMENT=validation
      - VALIDATION_STAGE=gmp-validation
      - GMP_VALIDATION_LEVEL=full
      - REGULATORY_MODE=strict
      - AUDIT_ALL_OPERATIONS=true
    volumes:
      - ./validation-protocols:/app/validation-protocols
      - ./regulatory-docs:/app/regulatory-docs
      - validation_reports:/app/validation-reports
    networks:
      - pharma-network
    profiles:
      - validation

  # =================================================================
  # Enhanced Monitoring for Production
  # =================================================================
  prometheus-production:
    image: prom/prometheus:latest
    environment:
      - PROMETHEUS_RETENTION_TIME=365d
      - PROMETHEUS_STORAGE_RETENTION_SIZE=50GB
    volumes:
      - ./monitoring/prometheus-production.yml:/etc/prometheus/prometheus.yml
      - prometheus_production_data:/prometheus
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    profiles:
      - production

  grafana-production:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_AUTH_BASIC_ENABLED=true
      - GF_SECURITY_DISABLE_GRAVATAR=true
    volumes:
      - grafana_production_data:/var/lib/grafana
      - ./monitoring/grafana/production-dashboards:/etc/grafana/provisioning/dashboards
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    profiles:
      - production

  # =================================================================
  # Compliance and Audit Services
  # =================================================================
  compliance-monitor:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    command: ["python", "scripts/compliance_monitor.py"]
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - COMPLIANCE_CHECK_INTERVAL=300  # 5 minutes
      - FDA_VALIDATION_ENABLED=true
      - AUDIT_TRAIL_MONITORING=true
    depends_on:
      - app
    volumes:
      - compliance_reports:/app/compliance-reports
      - ./config/.env.${ENVIRONMENT:-development}:/app/.env
    networks:
      - pharma-network
    profiles:
      - compliance

  audit-reporter:
    build:
      context: .
      dockerfile: Dockerfile
      target: reports
    command: ["python", "scripts/audit_reporter.py"]
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - REPORT_GENERATION_SCHEDULE=0 2 * * *  # Daily at 2 AM
      - REGULATORY_REPORT_TYPES=fda,gmp,iso13485
    depends_on:
      - app
    volumes:
      - audit_reports:/app/audit-reports
      - ./templates/regulatory:/app/templates/regulatory
    networks:
      - pharma-network
    profiles:
      - compliance

  # =================================================================
  # Security and Vulnerability Scanning
  # =================================================================
  security-scanner:
    build:
      context: .
      dockerfile: Dockerfile
      target: security-scan
    environment:
      - SCAN_SCHEDULE=0 3 * * *  # Daily at 3 AM
      - SCAN_TARGETS=app,database,network
    volumes:
      - security_reports:/app/security-reports
    networks:
      - pharma-network
    profiles:
      - security

  vulnerability-scanner:
    image: aquasec/trivy:latest
    command: >
      sh -c "
        trivy image --format json --output /reports/app-vulnerabilities.json pharma-manufacturing:latest &&
        trivy image --format json --output /reports/database-vulnerabilities.json postgres:15-alpine
      "
    volumes:
      - security_reports:/reports
    profiles:
      - security

  # =================================================================
  # Backup and Disaster Recovery
  # =================================================================
  backup-manager:
    build:
      context: .
      dockerfile: Dockerfile
      target: backup
    environment:
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-90}
      - BACKUP_ENCRYPTION_ENABLED=true
      - BACKUP_COMPRESSION_ENABLED=true
    volumes:
      - backup_storage:/app/backup-storage
      - ./scripts/backup:/app/scripts/backup
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - pharma-network
    profiles:
      - backup

  # =================================================================
  # Health Check Services
  # =================================================================
  health-monitor:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    command: ["python", "scripts/health_monitor.py"]
    environment:
      - HEALTH_CHECK_INTERVAL=30
      - ALERT_THRESHOLD_CPU=80
      - ALERT_THRESHOLD_MEMORY=85
      - ALERT_THRESHOLD_DISK=90
    depends_on:
      - app
      - postgres
      - redis
    volumes:
      - health_reports:/app/health-reports
    networks:
      - pharma-network
    profiles:
      - monitoring

# =================================================================
# Additional Volumes for Different Environments
# =================================================================
volumes:
  # Testing environment volumes
  postgres_test_data:
    driver: local
  test_reports:
    driver: local
  
  # Production environment volumes
  production_data:
    driver: local
  production_logs:
    driver: local
  production_backups:
    driver: local
  prometheus_production_data:
    driver: local
  grafana_production_data:
    driver: local
  
  # Compliance and audit volumes
  compliance_reports:
    driver: local
  audit_reports:
    driver: local
  validation_reports:
    driver: local
  
  # Security volumes
  security_reports:
    driver: local
  
  # Backup volumes
  backup_storage:
    driver: local
  
  # Health monitoring volumes
  health_reports:
    driver: local
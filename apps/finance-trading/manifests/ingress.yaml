apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: finance-trading-ingress
  namespace: finance-prod
  labels:
    app: finance-trading
    tier: production
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    nginx.ingress.kubernetes.io/upstream-hash-by: "$request_uri"
    nginx.ingress.kubernetes.io/session-cookie-name: "finance-trading-session"
    nginx.ingress.kubernetes.io/session-cookie-expires: "300"
    nginx.ingress.kubernetes.io/session-cookie-max-age: "300"
    nginx.ingress.kubernetes.io/session-cookie-path: "/"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "5"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-next-upstream: "error timeout invalid_header http_500 http_502 http_503"
    nginx.ingress.kubernetes.io/proxy-next-upstream-timeout: "10"
    nginx.ingress.kubernetes.io/proxy-next-upstream-tries: "3"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://trading.example.com"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization,X-Trading-Session,X-Risk-Level"
    nginx.ingress.kubernetes.io/rate-limit: "1000"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/limit-connections: "100"
    nginx.ingress.kubernetes.io/limit-rps: "500"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    finance.trading/deployment-strategy: "blue-green"
    finance.trading/canary-enabled: "true"
    finance.trading/success-rate-threshold: "99.99"
spec:
  tls:
  - hosts:
    - trading-api.example.com
    - trading-ws.example.com
    secretName: finance-trading-tls
  rules:
  - host: trading-api.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: finance-trading-service
            port:
              number: 80
      - path: /health
        pathType: Prefix
        backend:
          service:
            name: finance-trading-service
            port:
              number: 8081
      - path: /metrics
        pathType: Prefix
        backend:
          service:
            name: finance-trading-service
            port:
              number: 9090
  - host: trading-ws.example.com
    http:
      paths:
      - path: /ws
        pathType: Prefix
        backend:
          service:
            name: finance-trading-service
            port:
              number: 80
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: finance-trading-canary-ingress
  namespace: finance-prod
  labels:
    app: finance-trading
    tier: production
    deployment-type: canary
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/canary: "true"
    nginx.ingress.kubernetes.io/canary-weight: "5"
    nginx.ingress.kubernetes.io/canary-by-header: "X-Canary-Deploy"
    nginx.ingress.kubernetes.io/canary-by-header-value: "enabled"
    nginx.ingress.kubernetes.io/canary-by-cookie: "canary-trading"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    finance.trading/canary-success-rate: "99.99"
    finance.trading/canary-latency-threshold: "50ms"
spec:
  tls:
  - hosts:
    - trading-api.example.com
    secretName: finance-trading-tls
  rules:
  - host: trading-api.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: finance-trading-canary
            port:
              number: 80
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: finance-trading-network-policy
  namespace: finance-prod
spec:
  podSelector:
    matchLabels:
      app: finance-trading
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: finance-prod
    - namespaceSelector:
        matchLabels:
          name: istio-system
    - namespaceSelector:
        matchLabels:
          name: nginx-ingress
    - podSelector:
        matchLabels:
          app: prometheus
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 8081
    - protocol: TCP
      port: 9090
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80
  - to:
    - podSelector:
        matchLabels:
          app: market-data-feed
    ports:
    - protocol: TCP
      port: 8080
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
---
apiVersion: v1
kind: Secret
metadata:
  name: trading-secrets
  namespace: finance-prod
  labels:
    app: finance-trading
type: Opaque
stringData:
  database-url: "postgresql://trading:secret@postgres:5432/trading_db"
  redis-url: "redis://redis:6379/0"
  market-data-api-key: "your-api-key-here"
  jwt-secret: "your-jwt-secret-here"
  encryption-key: "your-encryption-key-here"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: finance-trading-sa
  namespace: finance-prod
  labels:
    app: finance-trading
automountServiceAccountToken: true
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: finance-trading-role
  namespace: finance-prod
rules:
- apiGroups: [""]
  resources: ["pods", "services", "configmaps"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["metrics.k8s.io"]
  resources: ["pods", "nodes"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: finance-trading-rolebinding
  namespace: finance-prod
subjects:
- kind: ServiceAccount
  name: finance-trading-sa
  namespace: finance-prod
roleRef:
  kind: Role
  name: finance-trading-role
  apiGroup: rbac.authorization.k8s.io
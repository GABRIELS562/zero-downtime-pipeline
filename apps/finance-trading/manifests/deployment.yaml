apiVersion: apps/v1
kind: Deployment
metadata:
  name: finance-trading-app
  namespace: finance-prod
  labels:
    app: finance-trading
    version: v1
    tier: production
  annotations:
    deployment.kubernetes.io/revision: "1"
    finance.trading/market-hours-aware: "true"
    finance.trading/rollback-threshold: "99.99"
spec:
  replicas: 6
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 50%
      maxUnavailable: 0
  selector:
    matchLabels:
      app: finance-trading
      version: v1
  template:
    metadata:
      labels:
        app: finance-trading
        version: v1
        tier: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: finance-trading-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - finance-trading
            topologyKey: "kubernetes.io/hostname"
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-type
                operator: In
                values:
                - high-performance
              - key: zone
                operator: In
                values:
                - us-east-1a
                - us-east-1b
      containers:
      - name: trading-engine
        image: finance-trading:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 8081
          name: health
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: LOG_LEVEL
          value: "INFO"
        - name: MARKET_DATA_ENDPOINT
          valueFrom:
            configMapKeyRef:
              name: trading-config
              key: market-data-endpoint
        - name: TRADING_HOURS
          valueFrom:
            configMapKeyRef:
              name: trading-config
              key: trading-hours
        - name: MAX_LATENCY_MS
          value: "50"
        - name: SUCCESS_RATE_THRESHOLD
          value: "99.99"
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health/live
            port: 8081
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 2
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 2
          timeoutSeconds: 1
          failureThreshold: 2
          successThreshold: 1
        startupProbe:
          httpGet:
            path: /health/startup
            port: 8081
          initialDelaySeconds: 10
          periodSeconds: 1
          timeoutSeconds: 1
          failureThreshold: 30
          successThreshold: 1
        volumeMounts:
        - name: config-volume
          mountPath: /etc/config
          readOnly: true
        - name: secrets-volume
          mountPath: /etc/secrets
          readOnly: true
        - name: temp-volume
          mountPath: /tmp
      - name: latency-monitor
        image: latency-monitor:latest
        ports:
        - containerPort: 8082
          name: monitor
        env:
        - name: TARGET_ENDPOINT
          value: "http://localhost:8080/health/fast"
        - name: MAX_LATENCY_MS
          value: "50"
        - name: CHECK_INTERVAL_MS
          value: "100"
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8082
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8082
          periodSeconds: 5
      - name: market-data-validator
        image: market-data-validator:latest
        ports:
        - containerPort: 8083
          name: validator
        env:
        - name: MARKET_DATA_FEEDS
          valueFrom:
            configMapKeyRef:
              name: trading-config
              key: market-data-feeds
        - name: VALIDATION_INTERVAL_MS
          value: "1000"
        - name: CONNECTION_TIMEOUT_MS
          value: "5000"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8083
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /feeds/status
            port: 8083
          periodSeconds: 5
          timeoutSeconds: 2
      volumes:
      - name: config-volume
        configMap:
          name: trading-config
      - name: secrets-volume
        secret:
          secretName: trading-secrets
      - name: temp-volume
        emptyDir:
          sizeLimit: 1Gi
      terminationGracePeriodSeconds: 60
      dnsPolicy: ClusterFirst
      restartPolicy: Always
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: trading-config
  namespace: finance-prod
data:
  market-data-endpoint: "wss://market-data.example.com/live"
  trading-hours: |
    {
      "NYSE": {
        "open": "09:30",
        "close": "16:00",
        "timezone": "America/New_York",
        "premarket": "04:00",
        "afterhours": "20:00"
      },
      "NASDAQ": {
        "open": "09:30", 
        "close": "16:00",
        "timezone": "America/New_York",
        "premarket": "04:00",
        "afterhours": "20:00"
      }
    }
  market-data-feeds: |
    [
      {
        "name": "bloomberg",
        "endpoint": "wss://bloomberg.com/feed",
        "priority": 1,
        "timeout_ms": 5000
      },
      {
        "name": "reuters",
        "endpoint": "wss://reuters.com/feed", 
        "priority": 2,
        "timeout_ms": 5000
      },
      {
        "name": "ice",
        "endpoint": "wss://ice.com/feed",
        "priority": 3,
        "timeout_ms": 5000
      }
    ]
  deployment-windows: |
    {
      "allowed_windows": [
        {
          "start": "02:00",
          "end": "04:00", 
          "timezone": "America/New_York",
          "description": "Pre-market deployment window"
        },
        {
          "start": "20:30",
          "end": "23:59",
          "timezone": "America/New_York", 
          "description": "Post-market deployment window"
        }
      ],
      "blocked_windows": [
        {
          "start": "09:30",
          "end": "16:00",
          "timezone": "America/New_York",
          "description": "NYSE/NASDAQ trading hours"
        }
      ]
    }